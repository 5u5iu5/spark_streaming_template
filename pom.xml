<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.adelpozo.streaming</groupId>
    <artifactId>template</artifactId>
    <packaging>pom</packaging>
    <version>1.0.0-SNAPSHOT</version>

    <modules>
        <module>streaming</module>
        <module>assembly</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <jdk.version>1.8</jdk.version>
        <scala.version>2.11.8</scala.version>
        <scala.short.version>2.11</scala.short.version>
        <log4j.version>1.2.17</log4j.version>
        <spark.version>2.3.0</spark.version>
        <spark.cloudera.version>2.3.0.cloudera2</spark.cloudera.version>
        <junit.version>4.13.1</junit.version>
        <hadoop.version>2.6.0</hadoop.version>
        <slf4j.version>1.7.25</slf4j.version>
        <typesafe.scala.logging>3.7.2</typesafe.scala.logging>
        <type-safe.version>1.3.3</type-safe.version>
        <kudu.cloudera.version>1.6.0-cdh5.14.2</kudu.cloudera.version>
        <kafka.version>0-10</kafka.version>
        <kafka.cloudera.version>3.0.0</kafka.cloudera.version>
        <mockito-all.version>1.9.5</mockito-all.version>
        <scopt.version>3.7.0</scopt.version>
        <holdenkarau.version>${spark.version}_0.10.0</holdenkarau.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-library</artifactId>
                <version>${scala.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-compiler</artifactId>
                <version>${scala.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-core_${scala.short.version}</artifactId>
                <version>${spark.cloudera.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.scala-lang</groupId>
                        <artifactId>scala-library</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.scala-lang</groupId>
                        <artifactId>scala-compiler</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.scala-lang</groupId>
                        <artifactId>scala-reflect</artifactId>
                    </exclusion>
                </exclusions>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-sql_${scala.short.version}</artifactId>
                <version>${spark.cloudera.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-log4j12</artifactId>
                    </exclusion>
                </exclusions>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-streaming_${scala.short.version}</artifactId>
                <version>${spark.cloudera.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-hive_${scala.short.version}</artifactId>
                <version>${spark.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-log4j12</artifactId>
                    </exclusion>
                </exclusions>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-streaming-kafka-${kafka.version}_${scala.short.version}</artifactId>
                <version>${spark.cloudera.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.kudu</groupId>
                <artifactId>kudu-client</artifactId>
                <version>${kudu.cloudera.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.kudu</groupId>
                <artifactId>kudu-spark2_${scala.short.version}</artifactId>
                <version>${kudu.cloudera.version}</version>
            </dependency>
            <dependency>
                <groupId>com.github.pureconfig</groupId>
                <artifactId>pureconfig_${scala.short.version}</artifactId>
                <version>0.8.0</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.scala-lang</groupId>
                        <artifactId>scala-compiler</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>com.typesafe.scala-logging</groupId>
                <artifactId>scala-logging_${scala.short.version}</artifactId>
                <version>${typesafe.scala.logging}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.scala-lang</groupId>
                        <artifactId>scala-reflect</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>com.typesafe</groupId>
                <artifactId>config</artifactId>
                <version>${type-safe.version}</version>
            </dependency>
            <!--<dependency>-->
                <!--<groupId>io.circe</groupId>-->
                <!--<artifactId>circe-parser_2.11</artifactId>-->
                <!--<version>0.11.0</version>-->
            <!--</dependency>-->
            <dependency>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest_${scala.short.version}</artifactId>
                <version>3.0.5</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.scala-lang</groupId>
                        <artifactId>scala-library</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.scala-lang</groupId>
                        <artifactId>scala-reflect</artifactId>
                    </exclusion>
                </exclusions>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>net.manub</groupId>
                <artifactId>scalatest-embedded-kafka-streams_${scala.short.version}</artifactId>
                <version>0.9.0</version>
                <!--Para kafka 0.11.0 <version>0.16.0</version>-->
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-all</artifactId>
                <version>${mockito-all.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.whisk</groupId>
                <artifactId>docker-testkit-core_2.11</artifactId>
                <version>0.9.8</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.whisk</groupId>
                <artifactId>docker-testkit-scalatest_2.11</artifactId>
                <version>0.9.8</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.github.docker-java</groupId>
                <artifactId>docker-java</artifactId>
                <version>3.0.14</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.whisk</groupId>
                <artifactId>docker-testkit-impl-docker-java_2.11</artifactId>
                <version>0.9.8</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.github.scopt</groupId>
                <artifactId>scopt_${scala.short.version}</artifactId>
                <version>${scopt.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.scala-lang</groupId>
                        <artifactId>scala-library</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <!--<dependency>-->
                <!--<groupId>com.holdenkarau</groupId>-->
                <!--<artifactId>spark-testing-base_${scala.short.version}</artifactId>-->
                <!--<version>${holdenkarau.version}</version>-->
                <!--<scope>test</scope>-->
                <!--<exclusions>-->
                    <!--<exclusion>-->
                        <!--<artifactId>jetty-util</artifactId>-->
                        <!--<groupId>org.eclipse.jetty</groupId>-->
                    <!--</exclusion>-->
                <!--</exclusions>-->
            <!--</dependency>-->
            <dependency>
                <groupId>org.apache.avro</groupId>
                <artifactId>avro</artifactId>
                <version>1.8.2</version>
            </dependency>
            <dependency>
                <groupId>io.confluent</groupId>
                <artifactId>kafka-avro-serializer</artifactId>
                <version>5.1.1</version>
            </dependency>
            <!--<dependency>-->
                <!--<groupId>org.apache.kafka</groupId>-->
                <!--<artifactId>kafka_2.11</artifactId>-->
                <!--<version>0.10.0.0</version>-->
            <!--</dependency>-->
            <!--<dependency>-->
                <!--<groupId>kafka-avro-confluent</groupId>-->
                <!--<artifactId>kafka-avro-confluent</artifactId>-->
                <!--<version>0.1.0</version>-->
            <!--</dependency>-->
            <dependency>
                <groupId>com.github.tomakehurst</groupId>
                <artifactId>wiremock-jre8</artifactId>
                <version>2.21.0</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>io.spray</groupId>
                <artifactId>spray-json_2.11</artifactId>
                <version>1.3.3</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.play</groupId>
                <artifactId>play-json_2.11</artifactId>
                <version>2.6.9</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.scala-lang</groupId>
                        <artifactId>scala-library</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.scala-lang</groupId>
                        <artifactId>scala-reflect</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.scalamock</groupId>
                <artifactId>scalamock_2.11</artifactId>
                <version>4.1.0</version>
                <scope>test</scope>
            </dependency>
        </dependencies>

    </dependencyManagement>

    <distributionManagement>
        <repository>
            <id>releases</id>
            <url>${artifactory.release.url}</url>
        </repository>
        <snapshotRepository>
            <uniqueVersion>false</uniqueVersion>
            <id>snapshots</id>
            <url>${artifactory.snapshot.url}</url>
        </snapshotRepository>
    </distributionManagement>


    <build>
        <sourceDirectory>Code/spark/src/main/scala</sourceDirectory>
        <testSourceDirectory>Code/spark/src/test/scala</testSourceDirectory>
        <finalName>${project.artifactId}-${project.version}</finalName>
    </build>
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.scala-tools</groupId>
                <artifactId>maven-scala-plugin</artifactId>
                <configuration>
                    <scalaVersion>${scala.version}</scalaVersion>
                </configuration>
            </plugin>
        </plugins>
    </reporting>


</project>
